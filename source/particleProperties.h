// particleProperties.h: Class storing particle property information
// and function used to initialize properties, write to file, etc.
// Contains both wall and particle material properties
//
// Note: Many of the base methods in this class are empty, but
//		they have been kept for consistency. Assuming compiler
//		will optimize them away.
//
// (c) Zachary Mills, 2019 
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_PARTICLEPROPERTIES_H__INCLUDED_)
#define AFX_PARTICLEPROPERTIES_H__INCLUDED_

#include "StdAfx.h"
#include "Kernels.h"
#include "Array.h"
#include "particleStructs.h"

#pragma once

// Will be able to treat class as though its an array of pParams
// (specifically, will be able to easily access elements of array and
// pass buffer to kernels)
class particleProperties : public PParam
{
public:

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////	
//////////////                                               ///////////////
//////////////    CONSTRUCTOR/DESTRUCTOR/ENUMS/FUNC_PTRS     ///////////////
//////////////                                               ///////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

	particleProperties() : PParam("parP")//,
//		D_p("Dp"), D_p_real("Dp_real"), M_p("Mp"),
//		V_par("Vp"), D_dists("parDists"), F_po("Fpo"),
//		Kth_pars("KthVal"), Q_A_prime("Qa_prime"),
//		Q_A("Qa"), Tau_crit("tauCrit"), R_d("Rd")
	{}

	~particleProperties()
	{}


////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
//////////////                                               ///////////////
//////////////           KERNELS/REDUCTIONS/SOLVERS          ///////////////
//////////////                                               ///////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////	
//////////////                                               ///////////////
//////////////                   ARRAYS                      ///////////////
//////////////                                               ///////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////	
//////////////                   Data Arrays                 ///////////////
////////////////////////////////////////////////////////////////////////////
	
	// Commented out arrays are already part of PParam, which this 
	// class inherits from

	// Arrays containing particle properties (D_p is particle
	// diameters in LB units, D_p_real is diameters in meters,
	// all others are in LB units)
	//Array1Dd D_p;		// particle diameters in LB units
	Array1Dd D_p_real;	// particle diameters in meters
	//Array1Dd M_p;		// mass of particles
	Array1Dd V_par;		// volume of particle adjusted for porosity
	//Array1Dd D_dists;	// particle size distribution
	Array1Dd F_po;		// vander wals force
	//Array1Dd Kth;	// thermophoretic coefficient

	// 2D arrays with values for particle/wall and particle/fouling layer 
	// interactions for each particle
	//Array2Dd Q_A_prime;	// Qa' (see thesis for more information)
	//Array2Dd Q_A;		// Qa (see thesis for more information)
	//Array2Dd Tau_crit;	// critical shear stress
	Array2Dd R_d;		// Radius of flattened surface between particle 
						// and wall (see thesis)

////////////////////////////////////////////////////////////////////////////	
//////////////                   Method Arrays               ///////////////
////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////	
//////////////                   Output Arrays               ///////////////
////////////////////////////////////////////////////////////////////////////	




////////////////////////////////////////////////////////////////////////////	
//////////////                   Display Arrays              ///////////////
////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////	
//////////////                                               ///////////////
//////////////                 OPENCL BUFFERS                ///////////////
//////////////                                               ///////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////




////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////	
//////////////                                               ///////////////
//////////////                   VARIABLES                   ///////////////
//////////////                                               ///////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////	
//////////////             Run Parameter Variables           ///////////////
////////////////////////////////////////////////////////////////////////////	

	int Nd; // number of diameter bins
	double WofA, Estar, WofA_s, Estar_s; // surface/particle properties
	double Tau_crit_max;				// maximum critcal shear
	double sootNumConc, parThermalCond, mfpAir;
	double surfEnergySurf, poissonSurf, yModSurf;
	double surfEnergySoot, poissonSoot, yModSoot;
	double hamakerConst, depPorosity, wallCorrection;
	double liftCoeff, parVolMultiplier, numEachPar;
	double inletConcPerDx; // concentration at inlet in #particles/dx



////////////////////////////////////////////////////////////////////////////	
//////////////                Method Variables               ///////////////
////////////////////////////////////////////////////////////////////////////	


////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////	
//////////////                                               ///////////////
//////////////                  BASE FUNCTIONS               ///////////////
//////////////                                               ///////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////	

	// Allocates host arrays containing data
	//void allocateArrays();

	// Allocates device buffers, and copies host contents to them
	//void allocateBuffers();

	// Creates kernels from compiled openCL source code. Pointers to 
	// these functions are passed to sourceGenerator to allow for 
	// them to be called after compilation
	void createKernels();

	// Frees arrays on host which are no longer needed to save memory
	void freeHostArrays();

	// Inititialization function
	void ini();

	// Loads parameters passed in yaml parameter file, (also reads in 
	// restart variables when a run is restarted)
	void loadParams();

	// Copies saved files from main folder into results folder to ensure
	// that next files do not save 
	void renameSaveFiles();

	// Writes output data to file(specific arrays, not all of them)
	void save2file();

	// Writes additional data to file for debugging purposes
	void saveDebug();

	// Saves parameters to yaml file used for restarting runs
	void saveParams();

	// Saves bin files necessary to restart run
	void saveRestartFiles();

	// Saves time output data (i.e. avg velocity, shear, Nu, etc)
	void saveTimeData();

	// Sets arguments to kernels.Pointer to this function is passed to 
	// sourceGenerator along with createKernels so that after kernels 
	// are created, all arguments are set.
	// Note: parameters cannot be set in any other initialization functions,
	// because kernel creation is last initialization step.
	void setKernelArgs();

	// Prepends macro definitions specific to the class method to opencl source
	void setSourceDefines();

	// Tests to see if run is new, or if it is a restart.If information is 
	// missing, the run cannot restart.
	// Note: The run will be able to load temp and velocity data while still
	// being a new run for remaining methods
	bool testRestartRun();

	// Calls kernels to save time data (umean, avg density, etc) to array
	// on device, which will eventually be saved if it reaches its max 
	// size, or a save step is reached
	void updateTimeData();

	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////	
	//////////////                                               ///////////////
	//////////////            CLASS SPECIFIC FUNCTIONS           ///////////////
	//////////////                                               ///////////////
	////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////	
	//////////////            Initialization Functions           ///////////////
	////////////////////////////////////////////////////////////////////////////
	
	// creates Property arrays
	void createPropertyArrays();

	// fills Array1DPP array
	void fillPropStructArray();

	////////////////////////////////////////////////////////////////////////////	
	//////////////              Updating Functions               ///////////////
	////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////	
	//////////////               Solving Functions               ///////////////
	////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////	
	//////////////                Output Functions               ///////////////
	////////////////////////////////////////////////////////////////////////////

	// Saves particle property infomation
	// for post-processing
	// writes files to particles directory
	void saveParticleArrays();


	////////////////////////////////////////////////////////////////////////////	
	//////////////                Display Functions              ///////////////
	////////////////////////////////////////////////////////////////////////////












	////////////////////////////
	//    Basic Functions     //
	////////////////////////////


	////////////////////////////
	//  Class Specific Funcs  //
	////////////////////////////
	


};


















#endif 